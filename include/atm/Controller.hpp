#ifndef Controller_HPP
#define Controller_HPP

#include <sw/redis++/redis++.h>

using namespace sw::redis;

//////////////////////////////////////////////////////////////////////////////////////////////
/// \brief The Controller class contains all the operations needed by the ATM
//////////////////////////////////////////////////////////////////////////////////////////////
class Controller
{
 public:

  //////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Constructor
  //////////////////////////////////////////////////////////////////////////////////////////////
  Controller();
  Controller(std::string ip, int port);

  //////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Gets the fields required for a customer (name, pin, etc.)
  //////////////////////////////////////////////////////////////////////////////////////////////
  std::vector<std::string> getCustomerFields(std::unordered_map<std::string, std::unordered_map<std::string, std::string>>& custFieldsInfo);

  //////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Gets the fieds required for an account (balance, etc.)
  //////////////////////////////////////////////////////////////////////////////////////////////
  std::unordered_map<std::string, std::string> getAccountFields();

  //////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Create and add a new customer, will automatically open one account
  //////////////////////////////////////////////////////////////////////////////////////////////
  void addCustomer(std::unordered_map<std::string, std::string> custInfo);

  //////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Adds an account to a customer
  //////////////////////////////////////////////////////////////////////////////////////////////
  void addAccount(std::string custId);

  //////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Get a list of all customers
  //////////////////////////////////////////////////////////////////////////////////////////////
  std::vector<std::string> getCustomerList();

  //////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Get a list of accounts for a given customer
  //////////////////////////////////////////////////////////////////////////////////////////////
  std::vector<std::string> getCustomerAccounts(std::string custId);

  //////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Validate the customer's pin
  //////////////////////////////////////////////////////////////////////////////////////////////
  bool validatePin(std::string custId, std::string pin);

  //////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Get the customer's name
  //////////////////////////////////////////////////////////////////////////////////////////////
  std::string getName(std::string custId);

  //////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Get the balance in an account
  //////////////////////////////////////////////////////////////////////////////////////////////
  int getBalance(std::string custId, std::string account);

  //////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Deposit to an account
  //////////////////////////////////////////////////////////////////////////////////////////////
  void deposit(std::string custId, std::string account, int amount);

  //////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Withdraw from an account
  //////////////////////////////////////////////////////////////////////////////////////////////
  bool withdraw(std::string custId, std::string account, int amount);

 private:
  //////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Make sure database is set up with the correct info
  ///        (info needed for new customers, accounts, etc.)
  //////////////////////////////////////////////////////////////////////////////////////////////
  void setup();
  
  //////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Unrelated helper function to check if key exists in redis database
  //////////////////////////////////////////////////////////////////////////////////////////////
  bool keyExists(std::string key);

  //////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Generate a unique customer id
  //////////////////////////////////////////////////////////////////////////////////////////////
  std::string genNewCustId();

  //////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Generate a unique account id for a customer
  //////////////////////////////////////////////////////////////////////////////////////////////
  std::string genNewAccountId(std::string custId);

  //////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Reids object for accessing database
  //////////////////////////////////////////////////////////////////////////////////////////////
  Redis* redis;

};

#endif // Controller_HPP